model Organization {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Owner relationship
  ownerId String
  owner   User   @relation("OwnedOrganizations", fields: [ownerId], references: [id])

  // Members relationship
  members      OrganizationMember[]
  currentUsers User[]               @relation("CurrentOrganization")

  // Business fields
  businessLocation String?
  businessType     String?
  description      String?
  onboarding       Json?

  // Stripe fields
  stripeAccountId             String? @unique
  stripeCSRF                  String? @unique
  stripeAccountDisabled       Boolean @default(false)
  stripeAccountDisabledReason String?

  // Entity relationships
  tiers        Tier[]
  contracts    Contract[]
  prospects    Prospect[]           @relation(name: "prospects")
  sites        Site[]
  invites      OrganizationInvite[]
  billing      OrganizationBilling?
  integrations Integration[]

  @@index([ownerId])
}

enum PlanType {
  FREE /// Default plan with basic features
  PRO /// Paid plan with advanced features
  CUSTOM /// Special plans (invoice, custom features)
}

enum SubscriptionStatus {
  ACTIVE /// Stripe: subscription is active
  CANCELED /// Stripe: subscription was canceled
  INCOMPLETE /// Stripe: payment failed
  INCOMPLETE_EXPIRED /// Stripe: payment failed and expired
  PAST_DUE /// Stripe: payment overdue
  UNPAID /// Stripe: payment failed multiple times
}

model OrganizationBilling {
  id             String       @id @default(cuid())
  organizationId String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  planType PlanType @default(FREE)

  // Stripe fields - only populated for PRO plans
  stripeCustomerId     String?             @unique
  stripeSubscriptionId String?             @unique
  stripeProductId      String?
  subscriptionStatus   SubscriptionStatus? // Null for FREE/CUSTOM plans

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
}

model OrganizationMember {
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           OrganizationRole @default(MEMBER)
  createdAt      DateTime         @default(now())

  @@id([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
}

model OrganizationInvite {
  id             String           @id @default(cuid())
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           OrganizationRole @default(MEMBER)
  invitedBy      String?
  inviter        User?            @relation("InvitedBy", fields: [invitedBy], references: [id], onDelete: SetNull)
  createdAt      DateTime         @default(now())
  expiresAt      DateTime

  @@unique([organizationId, email])
  @@index([email])
  @@index([expiresAt])
}
